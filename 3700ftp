#!/usr/bin/env python3
import os
import sys
import socket
from urllib.parse import urlparse

# Variables
parsed_url = ""
username = "anonymous"
password = ""
host = ""
port = 21
code = ""
localToRemote = False
ftp_path = ""
local_file = ""

# parsing the command line for operations with 1 argument
def settingOneArg():
    global parsed_url, ftp_path
    if len(sys.argv) > 3 : print("Invalid arguments for operation") 
    else : 
        parsed_url = urlparse(sys.argv[2])
        ftp_path = parsed_url.path

# parsing the command line for operations with 2 argument
def settingTwoArgs():
    global parsed_url, ftp_path, local_file, localToRemote
    if len(sys.argv) > 4 : print("Invalid arguments for operation") 
    else : 
        if sys.argv[2][:6] == "ftp://":
            parsed_url = urlparse(sys.argv[2])
            ftp_path = parsed_url.path
            local_file = sys.argv[3]
        else:
            local_file = sys.argv[2]
            parsed_url = urlparse(sys.argv[3])
            ftp_path = parsed_url.path
            localToRemote = True

# Checks the command line arguments
def arguments():
    global username, password, host, port, path, code
    urlparse("ftp://username:password@hostname:port/path")
    if (sys.argv[1]) == 'ls':
        code = "LIST"
        settingOneArg()
    if (sys.argv[1]) == 'mkdir':
        code = "MKD"
        settingOneArg()
        if parsed_url.path == '/': 
            print("Invalid path")
            return False
    if (sys.argv[1]) == 'rm':
        code = "DELE"
        settingOneArg()
    if (sys.argv[1]) == 'rmdir':
        code = "RMD"
        settingOneArg()
        if parsed_url.path == '/': 
            print("Invalid path")
            return False
    if (sys.argv[1]) == 'cp':
        settingTwoArgs()
        code = "STOR" if localToRemote else "RETR"
    if (sys.argv[1]) == 'mv':
        settingTwoArgs()
        code = "STOR" if localToRemote else "RETR"
    
    # setting the parsed url parts to the corresponding variables or default values if missing
    username = parsed_url.username if isinstance(parsed_url.username, str) else "anonymous"
    port = parsed_url.port if isinstance(parsed_url.port, int) else 21
    password, host = parsed_url.password, parsed_url.hostname

    # making sure host is given
    if isinstance(host, str):
        return True
    else:
        return False

# Gets data channel's ip address and port to connect to ftp socket
def getSocketDetails(pasv_message):
    ip_start = pasv_message.find('(') + 1
    ip_end = -1
    
    for i in range(0, 4): 
        ip_end = pasv_message.find(',', ip_end + 1)
    
    ip = pasv_message[ip_start:ip_end].replace(',', '.')
    
    port = pasv_message[ip_end + 1: -2]
    port_sep = port.find(',')
    port = (int(port[:port_sep]) << 8) + int(port[port_sep + 1:])
    
    return {"ip": ip, "port": port}

# sending a message to given socket
def serverInteract(s, message):
    if message: 
        s.send(message.encode())
    response = ""
    while response[-2:] != '\r\n':
        print(response)
        response += s.recv(4096).decode('UTF-8')
    print(response[:-2])
    return(response)

def main():
    if arguments():
        # create control channel
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            ip = socket.gethostbyname(host)
            s.connect((ip, port))

            # Reading the Welcome message
            serverInteract(s, "")

            # Setting up FTP connection
            message = "USER " + username + "\r\n"
            serverInteract(s, message)

            if isinstance(password, str): # only login with password if given password
                message = "PASS " + password + "\r\n"
                serverInteract(s, message)
            
            message = "TYPE I\r\n"
            serverInteract(s, message)

            message = "MODE S\r\n"
            serverInteract(s, message)

            message = "STRU F\r\n"
            serverInteract(s, message)

            # Handle the mkdir, rmdir, and rm operations
            if (code == "MKD" or code == "RMD" or code == "DELE"):
                message = code + " " + ftp_path + "\r\n"
                serverInteract(s, message)
            # Handle all other operations requiring a data channel
            else:
                # Open data channel
                message = "PASV\r\n"
                response = serverInteract(s, message)[:-2]
                
                # Creating Data Channel
                sock_details = getSocketDetails(response)
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s2:
                    s2.connect((sock_details["ip"], sock_details["port"]))

                    # Handling ls, cp, mv1
                    message = code + " " + ftp_path + "\r\n"
                    s.send(message.encode())

                    if localToRemote:
                        serverInteract(s, "")
                    else: 
                        response = b''
                        while(True):
                            resp = s2.recv(4096)
                            if(not resp):
                                break
                            response += resp
                    print(1, response)

                    # Send data to data channel
                    if localToRemote:
                        f = open(local_file, "rb")
                        contents = f.read()
                        print(contents)
                        f.close()

                        s2.send(contents)

                    # Receiving data from the data channel
                    if not localToRemote and code == "RETR":
                        f = open(local_file, "wb")
                        f.write(response)
                        f.close()
                        # clear responses
                        serverInteract(s, "")

                    s2.close() # close the data channel if not closed already
                # Deleting the original file for mv operation
                if sys.argv[1] == "mv":
                    if code == "RETR":
                        message = "DELE " + ftp_path + "\r\n"
                        serverInteract(s, message)
                    else: 
                        print(local_file)
                        os.remove(local_file)

                # clear responses
                serverInteract(s, "")
            # Telling FTP server to close the connection
            message = "QUIT\r\n"
            serverInteract(s, message)
            s.close()

main()

# connect to ftp: https://stackoverflow.com/questions/26715101/python-sockets-connect-to-ftp-dont-receive-what-i-expect
# socket send: https://pythontic.com/modules/socket/send 
# help withhttps://www.geeksforgeeks.org/python-ways-to-find-nth-occurrence-of-substring-in-a-string/
# python write to file: https://www.w3schools.com/python/python_file_write.asp 